WEBVTT

00:00.970 --> 00:07.130
This would you let's look at the map interfaces and also get an overview of the different implementations.

00:07.150 --> 00:11.040
So as we discussed earlier maps about key value pairs.

00:11.200 --> 00:16.960
For example I have a set of elements how I understood how many times each element is present or is present

00:16.960 --> 00:20.060
fight and sees two and two times and so on and so forth.

00:20.080 --> 00:27.390
So I use is the key element as the key and the value is the number of times it is present.

00:27.520 --> 00:32.680
So this kind of key value kind of data structures fit the map structure.

00:32.920 --> 00:38.950
So if you look at the map interface typically everything is around being everything surrounding the

00:38.950 --> 00:41.790
key and the value kind of stuff.

00:41.810 --> 00:44.380
So you have a method to check if there is a specific key.

00:44.380 --> 00:52.510
There is a specific value you can get the value at a specific key and you can put key comma values so

00:52.510 --> 01:01.780
you can put something at this basic dispirit key and you can remove an element having a specific key.

01:01.870 --> 01:04.920
You can put all everything in under the map.

01:04.930 --> 01:10.510
You can do it clear the other things that you can see around the keyset so you can get the key said

01:10.510 --> 01:17.210
that basically the set containing all the key values in the hash map are in the map actually.

01:17.260 --> 01:22.350
So you can get a collection of values and also the entries set as well.

01:22.390 --> 01:28.510
So these are the at the high level the important method in the map interface.

01:28.510 --> 01:34.450
The other important interface in the map hierarchy is the sort that maps or sort of map as you can see

01:34.450 --> 01:42.920
extents map however sorted map would be storing the elements in the order of their keys.

01:43.120 --> 01:50.590
So with the hash map I'm in with an on World Map ordering is not guaranteed but with the starboard map

01:50.920 --> 01:53.740
all of the elements is guaranteed.

01:53.740 --> 02:00.940
So you can actually create the I mean chloÃ© to compare it read the map creation time and sort the elements

02:00.940 --> 02:03.980
in the map according to that competitor as well.

02:04.180 --> 02:07.830
So similar to the sorted set kind of thing.

02:08.020 --> 02:15.070
This also provides that like sub Map Head map list map first key Laskey and things like that.

02:15.070 --> 02:22.360
The aliment are stored in the order of their keys so I can't say I would want from this key to Diski

02:22.480 --> 02:29.400
all the elements all the map elements I can create a map for that I can create also a head map or a

02:29.710 --> 02:35.920
map and also I can get the first key and the last symbol to the navigable set.

02:35.920 --> 02:38.030
You have an navigable map.

02:38.140 --> 02:43.780
So it's basically started in MAP extended with a few navigable that.

02:43.810 --> 02:44.720
So you can get.

02:44.770 --> 02:46.710
I want wonder which is lower than this.

02:46.720 --> 02:49.860
I don't know which is higher than this.

02:49.870 --> 02:54.040
I to key which is at least as big as this.

02:54.100 --> 02:55.800
And so on and so forth.

02:56.020 --> 03:00.960
Let's look at a few sample implementation of the maps or hash map implement map.

03:01.090 --> 03:08.440
As with anything starting with hash are doing is not guaranteed so its hash map is unsorted and ordered

03:08.740 --> 03:16.220
hash table on the other hand it's synchronized to hash tables and I think what I think amazed hash map.

03:16.240 --> 03:21.140
So if you open up the hash table class you see synchronized on a lot of different methods.

03:21.190 --> 03:24.030
Other than that it's very similar to the hash map.

03:24.100 --> 03:29.770
One difference between hash map and the hash table is the fact that hash map allows a key with NULL

03:29.770 --> 03:31.790
value whereas hash table doesn't.

03:31.810 --> 03:39.460
The other important hash map is the link hash map with the linked hash map the insertion order is maintained

03:39.740 --> 03:46.420
link cache map slower insertion and deletion and you'd be able to isolate faster over all the elements

03:46.650 --> 03:50.550
it remap as you can see implements navigable map.

03:50.590 --> 03:59.770
So all the elements in the tree map are in sorted order and you can also use all the of all the navigation

03:59.770 --> 04:02.290
method which are present in the navigable map.

04:02.380 --> 04:08.410
In this way Our aim was to get a high level view of all the different interfaces and implementation

04:08.410 --> 04:13.690
classes which are present around the map interface and then the next we deal I.
