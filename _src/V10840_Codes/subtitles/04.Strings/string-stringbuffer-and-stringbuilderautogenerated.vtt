WEBVTT

00:01.400 --> 00:04.530
The next topic we're going to discuss is strings.

00:04.610 --> 00:08.560
So this is kind of one of the food topics of Indo-U.S. drinks.

00:08.580 --> 00:12.800
We'll look at a few questions related to strength in this step.

00:12.800 --> 00:21.230
So one of the favorite topics to discuss is immutability immutability of strings are all strings immutable.

00:21.440 --> 00:22.750
Yes.

00:23.110 --> 00:31.010
What does immutability mean as we look at the case of wrapper classes for an immutable class.

00:31.010 --> 00:38.240
Any instances of that particular class once you have created an object its value cannot be changed.

00:38.240 --> 00:45.680
So basically what it means is that once a String object is created you can never modify the value of

00:45.680 --> 00:47.530
that particular object.

00:47.600 --> 00:48.690
So you might ask.

00:48.770 --> 00:49.210
I have a.

00:49.220 --> 00:50.600
Can't get better.

00:50.660 --> 00:52.000
Inside the string.

00:52.280 --> 00:55.210
So an instance of string I can call the concat method.

00:55.250 --> 01:01.350
Is it not really concatenating that value to this value and changing the value inside that.

01:01.370 --> 01:03.690
The answer to that is no.

01:03.800 --> 01:10.430
What this string does can get method does is actually create a new string with the concatenated value

01:11.010 --> 01:15.980
what the list link reference contains the value for value 1 what with string reference contain the value

01:15.980 --> 01:22.370
of value to the string object which contains the value of all to they would remain containing the same

01:22.370 --> 01:22.870
values.

01:22.880 --> 01:29.360
What would be created is a new instance or a new instance of string which would have the value value

01:29.630 --> 01:31.080
1 or 2.

01:31.430 --> 01:36.650
So that would be a new instance which would be created but the existing value of string theory would

01:36.740 --> 01:38.640
remain valuable.

01:38.910 --> 01:44.510
I'm opening up the jar that Langland string class and looking at the different method which are present

01:44.510 --> 01:45.120
in here.

01:45.290 --> 01:50.840
If you look at all the methods which are present in the String class the one to which we typically use

01:50.840 --> 01:58.670
to modify or one to which we think would be typically used to modify the string cutesie can get it returned

01:58.780 --> 02:06.890
a string back replace returned a string back so the original string will not be changed or neutering

02:06.890 --> 02:10.510
will be created and that would be returned back.

02:10.520 --> 02:16.310
Same with substring it would only create a new string with that substring and it and it back the ordinal

02:16.310 --> 02:19.870
value of the string remained unchanged.

02:19.880 --> 02:26.640
Same is the case with two lowercase and two uppercase methods which are pleasant right below.

02:26.840 --> 02:32.810
So if you look at all the methods which are there to modify the string values they don't really modified

02:32.810 --> 02:33.720
the string value.

02:33.740 --> 02:39.470
They would just create a new string with the changed value and return that back the original string

02:39.470 --> 02:46.160
which you would pass to that particular string on which that particular method is in or will remain

02:46.280 --> 02:47.390
unchanged.

02:47.390 --> 02:51.640
This is because this string objects are immutable.

02:51.650 --> 02:59.010
You can never change the value of a string variable or a string object once it's created.

02:59.200 --> 03:02.700
You can change references but the actual object.

03:02.880 --> 03:08.450
You'll never be able to change the next thing we want to discuss is where the string values actually

03:08.450 --> 03:09.420
stored in memory.

03:09.470 --> 03:16.520
This is a tricky question because this is quite variable with different versions of Java so with different

03:16.520 --> 03:22.250
versions of that Jodi has been changing the answer which I'm giving would be particular to Jawa 7 and

03:22.250 --> 03:27.150
I guess it would remain the same in later versions of Java but I've never.

03:27.350 --> 03:34.730
I can never be sure the way the string variables are stored or just string values are stored is basically

03:34.810 --> 03:37.680
when you are creating something like this.

03:37.910 --> 03:39.880
We are using something called a value.

03:40.040 --> 03:46.540
So this would actually be stored in something called String constant pool.

03:46.650 --> 03:50.240
The string constant pull is present inside the heap memory.

03:50.360 --> 03:56.580
What it does what the compiler does it looks for this industry in constant pull if it exists.

03:56.750 --> 03:58.290
It is actually used.

03:58.520 --> 04:04.640
So for example if I'm creating another way people by the name string file is equal to value then what

04:04.640 --> 04:09.860
would happen is the existing value from the string constant pull is reduced.

04:09.860 --> 04:17.390
However if I'm using a new string then this would definitely create a string object on the heap.

04:17.390 --> 04:19.190
It would not try to use the value.

04:19.340 --> 04:22.120
What it does is it would try and create.

04:22.130 --> 04:26.480
It would definitely create a new object and put it on the heap.

04:26.870 --> 04:35.300
So these are the two approaches and always you'd prefer to not use a new string with a string because

04:35.300 --> 04:38.000
you'd want to use them a number of time.

04:38.060 --> 04:42.530
You'd hear about not using a string concatenation operator in loops.

04:42.600 --> 04:48.410
Why the reason why you don't want to use the string concatenation operator or even for that matter string

04:48.460 --> 04:56.350
dark concat method is because each time you do a concatenation you're creating a new object.

04:56.360 --> 05:02.950
So for example in this particular loop that we are looking at here this loop is running for almost a

05:03.010 --> 05:09.120
hundred thousand times or if you are an Indian IT running for an lactamase for each of those 100000

05:09.200 --> 05:13.620
times what we're doing is we are creating new objects.

05:13.790 --> 05:19.640
So we're creating actually more than hundred thousand string literals in here.

05:19.690 --> 05:20.150
That's it.

05:20.150 --> 05:25.930
So you are creating 100000 objects and adding adding adding to it.

05:25.940 --> 05:32.450
So this basically creates about 100000 objects which is really a lot of objects.

05:32.630 --> 05:37.990
So that's the reason why when you're looping in when you're looping or you are modifying a lot of string

05:37.990 --> 05:39.280
values in a loop.

05:39.470 --> 05:47.160
It's recommended that you go and use a string builder or a string buffer depending on your kind of situations.

05:47.300 --> 05:54.710
So string is not a good idea to use when you want to modify the value of that particular string multiple

05:54.710 --> 05:58.090
times like in a situation like a loop.

05:58.100 --> 06:01.440
This would have a great performance impact.

06:01.460 --> 06:03.440
How do you solve the problem.

06:03.500 --> 06:08.070
One of the ways is to use string buffer string buffer is thread safe.

06:08.270 --> 06:13.010
So it would bring it all overhead if you're not really looking at a story.

06:13.060 --> 06:18.400
It's a version you can go for a string builder but you can look at this example here as a string buffer

06:18.420 --> 06:24.760
I'm using a string buffer in sort of a string and appending to this string buffer always.

06:24.800 --> 06:27.280
So this is a unit test which we ran.

06:27.290 --> 06:32.420
So if you really want to look at that basic unit test you can do that.

06:32.450 --> 06:35.110
There's a test called String what a string buffer.

06:35.240 --> 06:40.880
You can look this up on the Get depositary or if you have set it up locally you can look at it there

06:40.880 --> 06:41.750
too.

06:41.750 --> 06:49.030
So when we ran this test string buffer it Dooks point four seconds.

06:49.020 --> 06:50.740
So it's less than half a second.

06:50.770 --> 06:54.020
However when we ran this with the string it took 25 seconds.

06:54.020 --> 06:57.690
That's a different off almost 50 times in performance.

06:57.890 --> 07:03.640
So be careful when you're using strings for concatenation or doing any volume modifications on the string.

07:03.680 --> 07:08.910
Make sure that you're not doing it in a loop or repeat that kind of scenario.

07:09.080 --> 07:09.640
OK.

07:09.840 --> 07:12.730
Now let's get to the favorite question.

07:12.980 --> 07:17.710
Some of the favorite question actually what is the difference between string and string buffer.

07:17.870 --> 07:26.630
I guess in most of the less experienced Jawa do of use this would be a standard question.

07:26.660 --> 07:31.730
The most important fact is is that the objects of type String immutable.

07:31.730 --> 07:36.020
You cannot change the value once a object is created.

07:36.290 --> 07:42.770
However string buffer you would be able to change the value of that particular object like in a situation

07:42.770 --> 07:50.410
where we saw before where a value of a string is modified multiple times then string buffer has both

07:50.780 --> 07:56.960
benefits but string and string buffer at a safe and string buffer is actually implemented by using synchronized

07:56.960 --> 07:59.290
keyword on all the methods.

07:59.320 --> 08:03.350
So using the signalized keyword is what makes string buffered thread safe.

08:03.350 --> 08:07.830
So even though you're changing the value of the string buffer because we use string synchronized keyword

08:07.850 --> 08:11.900
on the method they cannot be concurrently modified by different threads.

08:11.930 --> 08:17.790
So thereby by if the other favorite question is string builder What's the string buffer.

08:17.810 --> 08:20.070
It's basically string builder.

08:20.120 --> 08:21.690
It's not thread safe.

08:21.710 --> 08:28.190
So that means if same object is referenced by two different thread then this thread safety is not really

08:28.190 --> 08:29.810
guaranteed.

08:29.810 --> 08:34.140
So that's the main difference between string builder and string buffer.

08:34.190 --> 08:37.670
A few of the utility methods in string you can look at them in here.

08:37.670 --> 08:43.100
So there are a few things on the screen lent to string equal Soknacki substring and all that kind of

08:43.100 --> 08:43.610
stuff.

08:43.610 --> 08:49.090
One of the things you might want to do is dig the string was a string buffer example.

08:49.220 --> 08:55.790
As I said before all the examples I don't get her repository Jawaid to your questions and answers so

08:56.000 --> 09:01.760
you can just look at a good repository in 28 minutes you should be able to easily find the job interview

09:01.800 --> 09:07.680
questions and answers to poetry and you would find a class called string or a string buffer in there

09:08.030 --> 09:09.180
so you can run this test.

09:09.200 --> 09:13.190
This would give you a good example of the performance between string and string buffer.

09:13.190 --> 09:18.010
You can add string builder as well and see what kind of a performance difference it brings in.

09:18.320 --> 09:21.200
There's a simple test with no threading kind of thing.

09:21.200 --> 09:26.500
So debarment might be the same posting referencing but you can really play around with it.

09:26.680 --> 09:32.090
And the other example we would recommend for you to look at is the string example Sustrans spend some

09:32.090 --> 09:33.250
time with it.

09:33.320 --> 09:35.200
It has a lot of examples of string.

09:35.210 --> 09:42.260
And you can try and understand the string thing and the there are the first two exercises for you as

09:42.260 --> 09:45.140
part of this course until next step.

09:45.150 --> 09:45.610
But by.
